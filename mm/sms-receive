#!/usr/bin/env python3
# -*- Mode: python; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License along
# with this program; if not, write to the Free Software Foundation, Inc., 51
# Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Copyright (C) 2016 Aleksander Morgado <aleksander@aleksander.es>
#

import sys
import time
import json

import gi
gi.require_version('ModemManager', '1.0')
from gi.repository import Gio, GLib, GObject, ModemManager

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

def main():
    """Main routine."""


    # Connection to ModemManager
    connection = Gio.bus_get_sync(Gio.BusType.SYSTEM, None)
    manager = ModemManager.Manager.new_sync(
        connection, Gio.DBusObjectManagerClientFlags.DO_NOT_AUTO_START, None)
    if not manager.get_name_owner():
        eprint('ModemManager not found in bus')
        sys.exit(2)

    # Iterate modems and send SMS with each
    for obj in manager.get_objects():
        messaging = obj.get_modem_messaging()
        messages = messaging.list_sync()
        l = []
        for sms in messages:
            if sms.get_state() == ModemManager.SmsState.SENT:
                eprint('deleting sent: %s' % sms.get_object_path())
                messaging.delete_sync(sms.get_object_path())
            elif sms.get_state() == ModemManager.SmsState.UNKNOWN:
                eprint('ignoring deleted message')
            elif sms.get_storage() == ModemManager.SmsStorage.SM:
                eprint('deleting: %s' % sms.get_object_path())
                messaging.delete_sync(sms.get_object_path())
            else:
                l.append({'number': sms.get_number(), 'text': sms.get_text(), 'timestamp': sms.get_timestamp()})
                eprint('NUM: %s, TEXT: %s, TIMESTAMP: %s' % (sms.get_number(), sms.get_text(), sms.get_timestamp()))
                try:
                    eprint('deleting: %s' % sms.get_object_path())
                    messaging.delete_sync(sms.get_object_path())
                except gi.repository.GLib.GError:
                    eprint('deleting (try #2): %s' % sms.get_object_path())
                    messaging.delete_sync(sms.get_object_path())
        print(json.dumps(l))


if __name__ == "__main__":
    main()
